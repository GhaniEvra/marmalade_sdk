/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */

#include "s3eExt.h"
#include "IwDebug.h"
#include "s3eDevice.h"


#include "AdjustMarmalade.h"


#ifndef S3E_EXT_SKIP_LOADER_CALL_LOCK
// For MIPs (and WP8) platform we do not have asm code for stack switching
// implemented. So we make LoaderCallStart call manually to set GlobalLock
#if defined __mips || defined S3E_ANDROID_X86 || (defined(WINAPI_FAMILY) && (WINAPI_FAMILY == WINAPI_FAMILY_PHONE_APP))
#define LOADER_CALL_LOCK
#endif
#endif

/**
 * Definitions for functions types passed to/from s3eExt interface
 */
typedef  s3eResult(*adjust_AppDidLaunch_t)(const char* appToken, const char* environment, const char* logLevel, bool eventBuffering);
typedef  s3eResult(*adjust_TrackEvent_t)(const char* eventToken, const adjust_param_type* params);
typedef  s3eResult(*adjust_TrackEventIphone_t)(const char* eventToken, const char** params_array, int param_size);
typedef  s3eResult(*adjust_TrackRevenue_t)(double cents, const char* eventToken, const adjust_param_type* params);
typedef  s3eResult(*adjust_TrackRevenueIphone_t)(double cents, const char* eventToken, const char** params_array, int param_size);
typedef  s3eResult(*adjust_SetEnabled_t)(bool enabled);
typedef  s3eResult(*adjust_IsEnabled_t)(bool& isEnabled_out);
typedef  s3eResult(*adjust_SetResponseDelegate_t)(adjust_response_data_delegate delegateFn);

/**
 * struct that gets filled in by AdjustMarmaladeRegister
 */
typedef struct AdjustMarmaladeFuncs
{
    adjust_AppDidLaunch_t m_adjust_AppDidLaunch;
    adjust_TrackEvent_t m_adjust_TrackEvent;
    adjust_TrackEventIphone_t m_adjust_TrackEventIphone;
    adjust_TrackRevenue_t m_adjust_TrackRevenue;
    adjust_TrackRevenueIphone_t m_adjust_TrackRevenueIphone;
    adjust_SetEnabled_t m_adjust_SetEnabled;
    adjust_IsEnabled_t m_adjust_IsEnabled;
    adjust_SetResponseDelegate_t m_adjust_SetResponseDelegate;
} AdjustMarmaladeFuncs;

static AdjustMarmaladeFuncs g_Ext;
static bool g_GotExt = false;
static bool g_TriedExt = false;
static bool g_TriedNoMsgExt = false;

static bool _extLoad()
{
    if (!g_GotExt && !g_TriedExt)
    {
        s3eResult res = s3eExtGetHash(0x1066434, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        else
            s3eDebugAssertShow(S3E_MESSAGE_CONTINUE_STOP_IGNORE,                 "error loading extension: AdjustMarmalade");

        g_TriedExt = true;
        g_TriedNoMsgExt = true;
    }

    return g_GotExt;
}

static bool _extLoadNoMsg()
{
    if (!g_GotExt && !g_TriedNoMsgExt)
    {
        s3eResult res = s3eExtGetHash(0x1066434, &g_Ext, sizeof(g_Ext));
        if (res == S3E_RESULT_SUCCESS)
            g_GotExt = true;
        g_TriedNoMsgExt = true;
        if (g_TriedExt)
            g_TriedExt = true;
    }

    return g_GotExt;
}

s3eBool AdjustMarmaladeAvailable()
{
    _extLoadNoMsg();
    return g_GotExt ? S3E_TRUE : S3E_FALSE;
}

s3eResult adjust_AppDidLaunch(const char* appToken, const char* environment, const char* logLevel, bool eventBuffering)
{
    IwTrace(ADJUSTMARMALADE_VERBOSE, ("calling AdjustMarmalade[0] func: adjust_AppDidLaunch"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_adjust_AppDidLaunch(appToken, environment, logLevel, eventBuffering);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult adjust_TrackEvent(const char* eventToken, const adjust_param_type* params)
{
    IwTrace(ADJUSTMARMALADE_VERBOSE, ("calling AdjustMarmalade[1] func: adjust_TrackEvent"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_adjust_TrackEvent(eventToken, params);

    if (ret == 1) {
        if (params == NULL) {
            ret = g_Ext.m_adjust_TrackEventIphone(eventToken, NULL, 0);
        } else {
            adjust_param_type::size_type param_size = params->size();;
            const char *params_array[param_size * 2];
            for(adjust_param_type::size_type i = 0; i < param_size; i++) {
                const char * key = ((*params)[i]).first;
                params_array[i*2 + 0] = key;

                const char * value = ((*params)[i]).second;
                params_array[i*2 + 1] = value;
            }
            ret = g_Ext.m_adjust_TrackEventIphone(eventToken, params_array, param_size);
        }
    }

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult adjust_TrackEventIphone(const char* eventToken, const char** params_array, int param_size)
{
    IwTrace(ADJUSTMARMALADE_VERBOSE, ("calling AdjustMarmalade[2] func: adjust_TrackEventIphone"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_adjust_TrackEventIphone(eventToken, params_array, param_size);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult adjust_TrackRevenue(double cents, const char* eventToken, const adjust_param_type* params)
{
    IwTrace(ADJUSTMARMALADE_VERBOSE, ("calling AdjustMarmalade[3] func: adjust_TrackRevenue"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_adjust_TrackRevenue(cents, eventToken, params);

    if (ret == 1) {
        if (params == NULL) {
            ret = g_Ext.m_adjust_TrackRevenueIphone(cents, eventToken, NULL, 0);
        } else {
            adjust_param_type::size_type param_size = params->size();;
            const char *params_array[param_size * 2];
            for(adjust_param_type::size_type i = 0; i < param_size; i++) {
                const char * key = ((*params)[i]).first;
                params_array[i*2 + 0] = key;

                const char * value = ((*params)[i]).second;
                params_array[i*2 + 1] = value;
            }
            ret = g_Ext.m_adjust_TrackRevenueIphone(cents, eventToken, params_array, param_size);
        }
    }

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult adjust_TrackRevenueIphone(double cents, const char* eventToken, const char** params_array, int param_size)
{
    IwTrace(ADJUSTMARMALADE_VERBOSE, ("calling AdjustMarmalade[4] func: adjust_TrackRevenueIphone"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_adjust_TrackRevenueIphone(cents, eventToken, params_array, param_size);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult adjust_SetEnabled(bool enabled)
{
    IwTrace(ADJUSTMARMALADE_VERBOSE, ("calling AdjustMarmalade[5] func: adjust_SetEnabled"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_adjust_SetEnabled(enabled);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult adjust_IsEnabled(bool& isEnabled_out)
{
    IwTrace(ADJUSTMARMALADE_VERBOSE, ("calling AdjustMarmalade[6] func: adjust_IsEnabled"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_adjust_IsEnabled(isEnabled_out);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}

s3eResult adjust_SetResponseDelegate(adjust_response_data_delegate delegateFn)
{
    IwTrace(ADJUSTMARMALADE_VERBOSE, ("calling AdjustMarmalade[7] func: adjust_SetResponseDelegate"));

    if (!_extLoad())
        return S3E_RESULT_ERROR;

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallStart(S3E_TRUE, NULL);
#endif

    s3eResult ret = g_Ext.m_adjust_SetResponseDelegate(delegateFn);

#ifdef LOADER_CALL_LOCK
    s3eDeviceLoaderCallDone(S3E_TRUE, NULL);
#endif

    return ret;
}
