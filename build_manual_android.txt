-AdjustMarmalade.s4e
#include <s3eTypes.h>

functions:

s3eResult AppDidLaunch(const char* appToken, const char* environment, const char* sdkPrefix, const char* logLevel, bool eventBuffering) S3E_RESULT_ERROR

edk_build.py AdjustMarmalade.s4e --platform=android

-h/AdjustMarmalade.h
  //Similar to the s4e file with the functions declarations, but adds AdjustMarmaladeAvailable() with return s3eBool.
  //Is it possible to use the same return for isEnable?
-source/h/AdjustMarmalade_autodefs.h
-interface/AdjustMarmalade_interface.cpp
  //Includes the functions declarations
  #include "AdjustMarmalade.h"

  //Definitions for functions types passed to/from s3eExt interface
  typedef  s3eResult(*AppDidLaunch_t)(const char* appToken, const char* environment, const char* sdkPrefix, const char* logLevel, bool eventBuffering);

  //Struct that gets filled in by AdjustMarmaladeRegister
  typedef struct AdjustMarmaladeFuncs
  {
    AppDidLaunch_t m_AppDidLaunch;
    TrackEvent_t m_TrackEvent;
    TrackRevenue_t m_TrackRevenue;
    setEnabled_t m_setEnabled;
    isEnabled_t m_isEnabled;
  } AdjustMarmaladeFuncs;
  static AdjustMarmaladeFuncs g_Ext;

  //Cpp code to invoke the java NDK functions?
  s3eResult AppDidLaunch(const char* appToken, const char* environment, const char* sdkPrefix, const char* logLevel, bool eventBuffering)
  {
    s3eResult ret = g_Ext.m_AppDidLaunch(appToken, environment, sdkPrefix, logLevel, eventBuffering);
    return ret;
  }

-interface/AdjustMarmalade.defines.txt
-source/generic/AdjustMarmalade_register.cpp
    Registers the extension and the functions with Marmalade
-AdjustMarmalade.mkf
    It has the path for external jars
-AdjustMarmalade_build.mkf
    Contains list of plataform dependent files
-source/android/AdjustMarmalade_platform.cpp

  //android-specific implementation of the AdjustMarmalade extension.
  //Add any platform-specific functionality here.

  #include "AdjustMarmalade_internal.h"
  static jmethodID g_AppDidLaunch;

  // Initialize the methods
  s3eResult AdjustMarmaladeInit_platform() {
    // Get all the extension methods
    g_AppDidLaunch = env->GetMethodID(cls, "AppDidLaunch", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)I");
    if (!g_AppDidLaunch)
        goto fail;
    // ...
  }

  // invoke the JNI, converting first the string objects
  s3eResult AppDidLaunch_platform(const char* appToken, const char* environment, const char* sdkPrefix, const char* logLevel, bool eventBuffering)
  {
    JNIEnv* env = s3eEdkJNIGetEnv();
    jstring appToken_jstr = env->NewStringUTF(appToken);
    jstring environment_jstr = env->NewStringUTF(environment);
    jstring sdkPrefix_jstr = env->NewStringUTF(sdkPrefix);
    jstring logLevel_jstr = env->NewStringUTF(logLevel);
    return (s3eResult)env->CallIntMethod(g_Obj, g_AppDidLaunch, appToken_jstr, environment_jstr, sdkPrefix_jstr, logLevel_jstr, eventBuffering);
  }

e-source/generic/AdjustMarmalade.cpp
  // call platforom specific code
#include "AdjustMarmalade_internal.h"
s3eResult AdjustMarmaladeInit()
{
    //Add any generic initialisation code here
    return AdjustMarmaladeInit_platform();
}

s3eResult AppDidLaunch(const char* appToken, const char* environment, const char* sdkPrefix, const char* logLevel, bool eventBuffering)
{
	return AppDidLaunch_platform(appToken, environment, sdkPrefix, logLevel, eventBuffering);
}

e-source/h/AdjustMarmalade_internal.h
    Functions declarations of plataform specific functions
/**
 * Platform-specific termination, implemented on each platform
 */
void AdjustMarmaladeTerminate_platform();
s3eResult AppDidLaunch_platform(const char* appToken, const char* environment, const char* sdkPrefix, const char* logLevel, bool eventBuffering);

e-AdjustMarmalade_android.mkb
# Builder mkb file for the AdjustMarmalade extension on android
e-AdjustMarmalade_android_java.mkb
# Builder mkb file for the java portion of the AdjustMarmalade extension on android
source/android/AdjustMarmalade.java

    java implementation of the AdjustMarmalade extension.

import com.ideaworks3d.marmalade.LoaderAPI;

class AdjustMarmalade
{
    public int AppDidLaunch(String appToken, String environment, String sdkPrefix, String logLevel, boolean eventBuffering)
    {
        return 0;
    }
}

e-source/generic/*.cpp //Invoca funcões definidas nos *_platform, conforme a plataforma
e--source/android/*_platform.cpp //Invoca código JNI
e---source/android/*.java

--TODO
1. passar array para Java
2. retornar isEnable
3. callback
